
nRFCmsisSTM32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f14  08000f14  00010f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08000f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000024  08000f40  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000048  08000f40  00020048  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002dcd  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000095e  00000000  00000000  00022e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000498  00000000  00000000  00023778  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  00023c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000015ec  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000153e  00000000  00000000  0002561c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00026b5a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000fac  00000000  00000000  00026bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00027b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000ef4 	.word	0x08000ef4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08000ef4 	.word	0x08000ef4

08000108 <__aeabi_uidiv>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__aeabi_uidiv+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__aeabi_uidiv+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__aeabi_uidiv+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__aeabi_uidiv+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__aeabi_uidiv+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__aeabi_uidiv+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000140:	e000      	b.n	8000144 <__aeabi_uidiv+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__aeabi_uidiv+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__aeabi_uidiv+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__aeabi_uidiv+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__aeabi_uidiv+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__aeabi_uidiv+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__aeabi_uidiv+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__aeabi_uidiv+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__aeabi_uidiv+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__aeabi_uidiv+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__aeabi_uidiv+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__aeabi_uidiv+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__aeabi_uidiv+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__aeabi_uidiv+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__aeabi_uidiv+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__aeabi_uidiv+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__aeabi_uidiv+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__aeabi_uidiv+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__aeabi_uidiv+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__aeabi_uidiv+0x100>
 8000218:	e776      	b.n	8000108 <__aeabi_uidiv>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e081      	b.n	8000340 <GPIO_Init+0x120>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800023c:	2201      	movs	r2, #1
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	409a      	lsls	r2, r3
 8000242:	0013      	movs	r3, r2
 8000244:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	4013      	ands	r3, r2
 800024e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d170      	bne.n	800033a <GPIO_Init+0x11a>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	791b      	ldrb	r3, [r3, #4]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d003      	beq.n	8000268 <GPIO_Init+0x48>
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	791b      	ldrb	r3, [r3, #4]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d138      	bne.n	80002da <GPIO_Init+0xba>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	0052      	lsls	r2, r2, #1
 8000270:	2103      	movs	r1, #3
 8000272:	4091      	lsls	r1, r2
 8000274:	000a      	movs	r2, r1
 8000276:	43d2      	mvns	r2, r2
 8000278:	401a      	ands	r2, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	689a      	ldr	r2, [r3, #8]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	795b      	ldrb	r3, [r3, #5]
 8000286:	0019      	movs	r1, r3
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	4099      	lsls	r1, r3
 800028e:	000b      	movs	r3, r1
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	889b      	ldrh	r3, [r3, #4]
 800029a:	b29b      	uxth	r3, r3
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	0412      	lsls	r2, r2, #16
 80002a0:	0c12      	lsrs	r2, r2, #16
 80002a2:	2101      	movs	r1, #1
 80002a4:	4091      	lsls	r1, r2
 80002a6:	000a      	movs	r2, r1
 80002a8:	b292      	uxth	r2, r2
 80002aa:	43d2      	mvns	r2, r2
 80002ac:	b292      	uxth	r2, r2
 80002ae:	4013      	ands	r3, r2
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	889b      	ldrh	r3, [r3, #4]
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	b21a      	sxth	r2, r3
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	799b      	ldrb	r3, [r3, #6]
 80002c2:	0019      	movs	r1, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	041b      	lsls	r3, r3, #16
 80002c8:	0c1b      	lsrs	r3, r3, #16
 80002ca:	4099      	lsls	r1, r3
 80002cc:	000b      	movs	r3, r1
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	697a      	ldr	r2, [r7, #20]
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	2103      	movs	r1, #3
 80002e4:	4091      	lsls	r1, r2
 80002e6:	000a      	movs	r2, r1
 80002e8:	43d2      	mvns	r2, r2
 80002ea:	401a      	ands	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	0019      	movs	r1, r3
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	4099      	lsls	r1, r3
 8000300:	000b      	movs	r3, r1
 8000302:	431a      	orrs	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	0412      	lsls	r2, r2, #16
 8000310:	0c12      	lsrs	r2, r2, #16
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	2103      	movs	r1, #3
 8000316:	4091      	lsls	r1, r2
 8000318:	000a      	movs	r2, r1
 800031a:	43d2      	mvns	r2, r2
 800031c:	401a      	ands	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	68da      	ldr	r2, [r3, #12]
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	79db      	ldrb	r3, [r3, #7]
 800032a:	0019      	movs	r1, r3
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	4099      	lsls	r1, r3
 8000332:	000b      	movs	r3, r1
 8000334:	431a      	orrs	r2, r3
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3301      	adds	r3, #1
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	2b0f      	cmp	r3, #15
 8000344:	d800      	bhi.n	8000348 <GPIO_Init+0x128>
 8000346:	e779      	b.n	800023c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b006      	add	sp, #24
 800034e:	bd80      	pop	{r7, pc}

08000350 <GPIO_SetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	000a      	movs	r2, r1
 800035a:	1cbb      	adds	r3, r7, #2
 800035c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 800035e:	1cbb      	adds	r3, r7, #2
 8000360:	881a      	ldrh	r2, [r3, #0]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	619a      	str	r2, [r3, #24]
}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	46bd      	mov	sp, r7
 800036a:	b002      	add	sp, #8
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)

08000370 <GPIO_ResetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	000a      	movs	r2, r1
 800037a:	1cbb      	adds	r3, r7, #2
 800037c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	1cba      	adds	r2, r7, #2
 8000382:	8812      	ldrh	r2, [r2, #0]
 8000384:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b002      	add	sp, #8
 800038c:	bd80      	pop	{r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)

08000390 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	2300      	movs	r3, #0
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003b0:	4b8a      	ldr	r3, [pc, #552]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	220c      	movs	r2, #12
 80003b6:	4013      	ands	r3, r2
 80003b8:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 80003ba:	69bb      	ldr	r3, [r7, #24]
 80003bc:	2b04      	cmp	r3, #4
 80003be:	d00c      	beq.n	80003da <RCC_GetClocksFreq+0x4a>
 80003c0:	d802      	bhi.n	80003c8 <RCC_GetClocksFreq+0x38>
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d005      	beq.n	80003d2 <RCC_GetClocksFreq+0x42>
 80003c6:	e03b      	b.n	8000440 <RCC_GetClocksFreq+0xb0>
 80003c8:	2b08      	cmp	r3, #8
 80003ca:	d00a      	beq.n	80003e2 <RCC_GetClocksFreq+0x52>
 80003cc:	2b0c      	cmp	r3, #12
 80003ce:	d033      	beq.n	8000438 <RCC_GetClocksFreq+0xa8>
 80003d0:	e036      	b.n	8000440 <RCC_GetClocksFreq+0xb0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a82      	ldr	r2, [pc, #520]	; (80005e0 <RCC_GetClocksFreq+0x250>)
 80003d6:	601a      	str	r2, [r3, #0]
      break;
 80003d8:	e036      	b.n	8000448 <RCC_GetClocksFreq+0xb8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a80      	ldr	r2, [pc, #512]	; (80005e0 <RCC_GetClocksFreq+0x250>)
 80003de:	601a      	str	r2, [r3, #0]
      break;
 80003e0:	e032      	b.n	8000448 <RCC_GetClocksFreq+0xb8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80003e2:	4b7e      	ldr	r3, [pc, #504]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80003e4:	685a      	ldr	r2, [r3, #4]
 80003e6:	23f0      	movs	r3, #240	; 0xf0
 80003e8:	039b      	lsls	r3, r3, #14
 80003ea:	4013      	ands	r3, r2
 80003ec:	617b      	str	r3, [r7, #20]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003ee:	4b7b      	ldr	r3, [pc, #492]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80003f0:	685a      	ldr	r2, [r3, #4]
 80003f2:	23c0      	movs	r3, #192	; 0xc0
 80003f4:	025b      	lsls	r3, r3, #9
 80003f6:	4013      	ands	r3, r2
 80003f8:	613b      	str	r3, [r7, #16]
      pllmull = ( pllmull >> 18) + 2;
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	0c9b      	lsrs	r3, r3, #18
 80003fe:	3302      	adds	r3, #2
 8000400:	617b      	str	r3, [r7, #20]
      
      if (pllsource == 0x00)
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d104      	bne.n	8000412 <RCC_GetClocksFreq+0x82>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	4a76      	ldr	r2, [pc, #472]	; (80005e4 <RCC_GetClocksFreq+0x254>)
 800040c:	4353      	muls	r3, r2
 800040e:	61fb      	str	r3, [r7, #28]
 8000410:	e00e      	b.n	8000430 <RCC_GetClocksFreq+0xa0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000412:	4b72      	ldr	r3, [pc, #456]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 8000414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000416:	220f      	movs	r2, #15
 8000418:	4013      	ands	r3, r2
 800041a:	3301      	adds	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800041e:	68f9      	ldr	r1, [r7, #12]
 8000420:	486f      	ldr	r0, [pc, #444]	; (80005e0 <RCC_GetClocksFreq+0x250>)
 8000422:	f7ff fe71 	bl	8000108 <__aeabi_uidiv>
 8000426:	0003      	movs	r3, r0
 8000428:	001a      	movs	r2, r3
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	4353      	muls	r3, r2
 800042e:	61fb      	str	r3, [r7, #28]
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69fa      	ldr	r2, [r7, #28]
 8000434:	601a      	str	r2, [r3, #0]
      break;
 8000436:	e007      	b.n	8000448 <RCC_GetClocksFreq+0xb8>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a6b      	ldr	r2, [pc, #428]	; (80005e8 <RCC_GetClocksFreq+0x258>)
 800043c:	601a      	str	r2, [r3, #0]
      break;
 800043e:	e003      	b.n	8000448 <RCC_GetClocksFreq+0xb8>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a67      	ldr	r2, [pc, #412]	; (80005e0 <RCC_GetClocksFreq+0x250>)
 8000444:	601a      	str	r2, [r3, #0]
      break;
 8000446:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000448:	4b64      	ldr	r3, [pc, #400]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	22f0      	movs	r2, #240	; 0xf0
 800044e:	4013      	ands	r3, r2
 8000450:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	091b      	lsrs	r3, r3, #4
 8000456:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp]; 
 8000458:	4a64      	ldr	r2, [pc, #400]	; (80005ec <RCC_GetClocksFreq+0x25c>)
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	18d3      	adds	r3, r2, r3
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b2db      	uxtb	r3, r3
 8000462:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	40da      	lsrs	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	605a      	str	r2, [r3, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000470:	4b5a      	ldr	r3, [pc, #360]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	23e0      	movs	r3, #224	; 0xe0
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	4013      	ands	r3, r2
 800047a:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 8;
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	0a1b      	lsrs	r3, r3, #8
 8000480:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000482:	4a5a      	ldr	r2, [pc, #360]	; (80005ec <RCC_GetClocksFreq+0x25c>)
 8000484:	69bb      	ldr	r3, [r7, #24]
 8000486:	18d3      	adds	r3, r2, r3
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	60bb      	str	r3, [r7, #8]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	685a      	ldr	r2, [r3, #4]
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	40da      	lsrs	r2, r3
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	609a      	str	r2, [r3, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 800049a:	4b50      	ldr	r3, [pc, #320]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 800049c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	4013      	ands	r3, r2
 80004a4:	d103      	bne.n	80004ae <RCC_GetClocksFreq+0x11e>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a51      	ldr	r2, [pc, #324]	; (80005f0 <RCC_GetClocksFreq+0x260>)
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	e010      	b.n	80004d0 <RCC_GetClocksFreq+0x140>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 80004ae:	4b4b      	ldr	r3, [pc, #300]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80004b0:	685a      	ldr	r2, [r3, #4]
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	01db      	lsls	r3, r3, #7
 80004b6:	4013      	ands	r3, r2
 80004b8:	d105      	bne.n	80004c6 <RCC_GetClocksFreq+0x136>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	085a      	lsrs	r2, r3, #1
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	e004      	b.n	80004d0 <RCC_GetClocksFreq+0x140>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	689b      	ldr	r3, [r3, #8]
 80004ca:	089a      	lsrs	r2, r3, #2
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60da      	str	r2, [r3, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 80004d0:	4b42      	ldr	r3, [pc, #264]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	2240      	movs	r2, #64	; 0x40
 80004d6:	4013      	ands	r3, r2
 80004d8:	d103      	bne.n	80004e2 <RCC_GetClocksFreq+0x152>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a45      	ldr	r2, [pc, #276]	; (80005f4 <RCC_GetClocksFreq+0x264>)
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	e003      	b.n	80004ea <RCC_GetClocksFreq+0x15a>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	0212      	lsls	r2, r2, #8
 80004e8:	611a      	str	r2, [r3, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80004ea:	4b3c      	ldr	r3, [pc, #240]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	2210      	movs	r2, #16
 80004f0:	4013      	ands	r3, r2
 80004f2:	d103      	bne.n	80004fc <RCC_GetClocksFreq+0x16c>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a3a      	ldr	r2, [pc, #232]	; (80005e0 <RCC_GetClocksFreq+0x250>)
 80004f8:	615a      	str	r2, [r3, #20]
 80004fa:	e003      	b.n	8000504 <RCC_GetClocksFreq+0x174>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	615a      	str	r2, [r3, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000504:	4b35      	ldr	r3, [pc, #212]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	2203      	movs	r2, #3
 800050a:	4013      	ands	r3, r2
 800050c:	d104      	bne.n	8000518 <RCC_GetClocksFreq+0x188>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	689a      	ldr	r2, [r3, #8]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	e01e      	b.n	8000556 <RCC_GetClocksFreq+0x1c6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051c:	2203      	movs	r2, #3
 800051e:	4013      	ands	r3, r2
 8000520:	2b01      	cmp	r3, #1
 8000522:	d104      	bne.n	800052e <RCC_GetClocksFreq+0x19e>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	619a      	str	r2, [r3, #24]
 800052c:	e013      	b.n	8000556 <RCC_GetClocksFreq+0x1c6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800052e:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	2203      	movs	r2, #3
 8000534:	4013      	ands	r3, r2
 8000536:	2b02      	cmp	r3, #2
 8000538:	d104      	bne.n	8000544 <RCC_GetClocksFreq+0x1b4>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	0212      	lsls	r2, r2, #8
 8000540:	619a      	str	r2, [r3, #24]
 8000542:	e008      	b.n	8000556 <RCC_GetClocksFreq+0x1c6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	2203      	movs	r2, #3
 800054a:	4013      	ands	r3, r2
 800054c:	2b03      	cmp	r3, #3
 800054e:	d102      	bne.n	8000556 <RCC_GetClocksFreq+0x1c6>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <RCC_GetClocksFreq+0x250>)
 8000554:	619a      	str	r2, [r3, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 8000558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800055a:	23c0      	movs	r3, #192	; 0xc0
 800055c:	029b      	lsls	r3, r3, #10
 800055e:	4013      	ands	r3, r2
 8000560:	d104      	bne.n	800056c <RCC_GetClocksFreq+0x1dc>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	689a      	ldr	r2, [r3, #8]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	61da      	str	r2, [r3, #28]
 800056a:	e027      	b.n	80005bc <RCC_GetClocksFreq+0x22c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 800056e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000570:	23c0      	movs	r3, #192	; 0xc0
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	401a      	ands	r2, r3
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	025b      	lsls	r3, r3, #9
 800057a:	429a      	cmp	r2, r3
 800057c:	d104      	bne.n	8000588 <RCC_GetClocksFreq+0x1f8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	61da      	str	r2, [r3, #28]
 8000586:	e019      	b.n	80005bc <RCC_GetClocksFreq+0x22c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 800058a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058c:	23c0      	movs	r3, #192	; 0xc0
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	401a      	ands	r2, r3
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	029b      	lsls	r3, r3, #10
 8000596:	429a      	cmp	r2, r3
 8000598:	d104      	bne.n	80005a4 <RCC_GetClocksFreq+0x214>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	0212      	lsls	r2, r2, #8
 80005a0:	61da      	str	r2, [r3, #28]
 80005a2:	e00b      	b.n	80005bc <RCC_GetClocksFreq+0x22c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80005a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a8:	23c0      	movs	r3, #192	; 0xc0
 80005aa:	029b      	lsls	r3, r3, #10
 80005ac:	401a      	ands	r2, r3
 80005ae:	23c0      	movs	r3, #192	; 0xc0
 80005b0:	029b      	lsls	r3, r3, #10
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d102      	bne.n	80005bc <RCC_GetClocksFreq+0x22c>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <RCC_GetClocksFreq+0x250>)
 80005ba:	61da      	str	r2, [r3, #28]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <RCC_GetClocksFreq+0x24c>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	4013      	ands	r3, r2
 80005c4:	d103      	bne.n	80005ce <RCC_GetClocksFreq+0x23e>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <RCC_GetClocksFreq+0x258>)
 80005ca:	621a      	str	r2, [r3, #32]
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 80005cc:	e002      	b.n	80005d4 <RCC_GetClocksFreq+0x244>
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
  }
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	69fa      	ldr	r2, [r7, #28]
 80005d2:	621a      	str	r2, [r3, #32]
  }   
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b008      	add	sp, #32
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	007a1200 	.word	0x007a1200
 80005e4:	003d0900 	.word	0x003d0900
 80005e8:	02dc6c00 	.word	0x02dc6c00
 80005ec:	20000000 	.word	0x20000000
 80005f0:	00d59f80 	.word	0x00d59f80
 80005f4:	00008012 	.word	0x00008012

080005f8 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	000a      	movs	r2, r1
 8000602:	1cfb      	adds	r3, r7, #3
 8000604:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000606:	1cfb      	adds	r3, r7, #3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <RCC_AHBPeriphClockCmd+0x3c>)
 8000610:	4a08      	ldr	r2, [pc, #32]	; (8000634 <RCC_AHBPeriphClockCmd+0x3c>)
 8000612:	6951      	ldr	r1, [r2, #20]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	430a      	orrs	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800061a:	e006      	b.n	800062a <RCC_AHBPeriphClockCmd+0x32>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <RCC_AHBPeriphClockCmd+0x3c>)
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <RCC_AHBPeriphClockCmd+0x3c>)
 8000620:	6952      	ldr	r2, [r2, #20]
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	43c9      	mvns	r1, r1
 8000626:	400a      	ands	r2, r1
 8000628:	615a      	str	r2, [r3, #20]
  }
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	000a      	movs	r2, r1
 8000642:	1cfb      	adds	r3, r7, #3
 8000644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000646:	1cfb      	adds	r3, r7, #3
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <RCC_APB2PeriphClockCmd+0x3c>)
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <RCC_APB2PeriphClockCmd+0x3c>)
 8000652:	6991      	ldr	r1, [r2, #24]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	430a      	orrs	r2, r1
 8000658:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800065a:	e006      	b.n	800066a <RCC_APB2PeriphClockCmd+0x32>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <RCC_APB2PeriphClockCmd+0x3c>)
 800065e:	4a05      	ldr	r2, [pc, #20]	; (8000674 <RCC_APB2PeriphClockCmd+0x3c>)
 8000660:	6992      	ldr	r2, [r2, #24]
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	43c9      	mvns	r1, r1
 8000666:	400a      	ands	r2, r1
 8000668:	619a      	str	r2, [r3, #24]
  }
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	000a      	movs	r2, r1
 8000682:	1cfb      	adds	r3, r7, #3
 8000684:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000686:	1cfb      	adds	r3, r7, #3
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000690:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <RCC_APB1PeriphClockCmd+0x3c>)
 8000692:	69d1      	ldr	r1, [r2, #28]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	430a      	orrs	r2, r1
 8000698:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800069a:	e006      	b.n	80006aa <RCC_APB1PeriphClockCmd+0x32>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <RCC_APB1PeriphClockCmd+0x3c>)
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <RCC_APB1PeriphClockCmd+0x3c>)
 80006a0:	69d2      	ldr	r2, [r2, #28]
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	43c9      	mvns	r1, r1
 80006a6:	400a      	ands	r2, r1
 80006a8:	61da      	str	r2, [r3, #28]
  }
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	40021000 	.word	0x40021000

080006b8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	; 0x38
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
 80006c6:	2300      	movs	r3, #0
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2201      	movs	r2, #1
 80006d4:	4393      	bics	r3, r2
 80006d6:	001a      	movs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	4a4b      	ldr	r2, [pc, #300]	; (8000814 <USART_Init+0x15c>)
 80006e6:	4013      	ands	r3, r2
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f0:	4313      	orrs	r3, r2
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f8:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000702:	4a45      	ldr	r2, [pc, #276]	; (8000818 <USART_Init+0x160>)
 8000704:	4013      	ands	r3, r2
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000716:	4313      	orrs	r3, r2
 8000718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800071a:	4313      	orrs	r3, r2
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000722:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072c:	4a3b      	ldr	r2, [pc, #236]	; (800081c <USART_Init+0x164>)
 800072e:	4013      	ands	r3, r2
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000738:	4313      	orrs	r3, r2
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000740:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000742:	2308      	movs	r3, #8
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fe22 	bl	8000390 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a34      	ldr	r2, [pc, #208]	; (8000820 <USART_Init+0x168>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d104      	bne.n	800075e <USART_Init+0xa6>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000754:	2308      	movs	r3, #8
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
 800075c:	e00c      	b.n	8000778 <USART_Init+0xc0>
  }
  else if (USARTx == USART2)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a30      	ldr	r2, [pc, #192]	; (8000824 <USART_Init+0x16c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d104      	bne.n	8000770 <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000766:	2308      	movs	r3, #8
 8000768:	18fb      	adds	r3, r7, r3
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
 800076e:	e003      	b.n	8000778 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8000770:	2308      	movs	r3, #8
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	4013      	ands	r3, r2
 8000782:	d014      	beq.n	80007ae <USART_Init+0xf6>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000786:	005a      	lsls	r2, r3, #1
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	0019      	movs	r1, r3
 800078e:	0010      	movs	r0, r2
 8000790:	f7ff fcba 	bl	8000108 <__aeabi_uidiv>
 8000794:	0003      	movs	r3, r0
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8000798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800079a:	005a      	lsls	r2, r3, #1
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f7ff fd36 	bl	8000214 <__aeabi_uidivmod>
 80007a8:	000b      	movs	r3, r1
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007ac:	e010      	b.n	80007d0 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	0019      	movs	r1, r3
 80007b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007b6:	f7ff fca7 	bl	8000108 <__aeabi_uidiv>
 80007ba:	0003      	movs	r3, r0
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd24 	bl	8000214 <__aeabi_uidivmod>
 80007cc:	000b      	movs	r3, r1
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	085a      	lsrs	r2, r3, #1
 80007d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d8:	429a      	cmp	r2, r3
 80007da:	d802      	bhi.n	80007e2 <USART_Init+0x12a>
  {
    divider++;
 80007dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007de:	3301      	adds	r3, #1
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	4013      	ands	r3, r2
 80007ec:	d00a      	beq.n	8000804 <USART_Init+0x14c>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80007ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	2207      	movs	r2, #7
 80007f4:	4013      	ands	r3, r2
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <USART_Init+0x170>)
 80007fc:	401a      	ands	r2, r3
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	4313      	orrs	r3, r2
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000806:	b29a      	uxth	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	819a      	strh	r2, [r3, #12]
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b00e      	add	sp, #56	; 0x38
 8000812:	bd80      	pop	{r7, pc}
 8000814:	ffffcfff 	.word	0xffffcfff
 8000818:	ffffe9f3 	.word	0xffffe9f3
 800081c:	fffffcff 	.word	0xfffffcff
 8000820:	40013800 	.word	0x40013800
 8000824:	40004400 	.word	0x40004400
 8000828:	0000fff0 	.word	0x0000fff0

0800082c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	000a      	movs	r2, r1
 8000836:	1cfb      	adds	r3, r7, #3
 8000838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800083a:	1cfb      	adds	r3, r7, #3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2201      	movs	r2, #1
 8000848:	431a      	orrs	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 800084e:	e006      	b.n	800085e <USART_Cmd+0x32>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2201      	movs	r2, #1
 8000856:	4393      	bics	r3, r2
 8000858:	001a      	movs	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
  }
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)

08000868 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:  Framing Error flag.
  *            @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000872:	230f      	movs	r3, #15
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	4013      	ands	r3, r2
 8000882:	d004      	beq.n	800088e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000884:	230f      	movs	r3, #15
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	e003      	b.n	8000896 <USART_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800088e:	230f      	movs	r3, #15
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000896:	230f      	movs	r3, #15
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	781b      	ldrb	r3, [r3, #0]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b004      	add	sp, #16
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <initUart>:
#define USART1_RX GPIO_Pin_10



void initUart(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO;	// struktura do gpio
	USART_InitTypeDef USART; 		//  struktura do USART1

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 , ENABLE); // wlaczenie taktowanie ukdu usart1
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	01db      	lsls	r3, r3, #7
 80008ae:	2101      	movs	r1, #1
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff fec1 	bl	8000638 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_AHBPeriph_GPIOA , ENABLE); //  wczenie taktowania portu I/O
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	029b      	lsls	r3, r3, #10
 80008ba:	2101      	movs	r1, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fedb 	bl	8000678 <RCC_APB1PeriphClockCmd>


	// GPIO  init
	//GPIO_PinAFConfig(GPIOA, USART1_TX, USART1);
	GPIOA->AFR[1] = (1 << 4) | (1 << 8); // ok
 80008c2:	2390      	movs	r3, #144	; 0x90
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2288      	movs	r2, #136	; 0x88
 80008c8:	0052      	lsls	r2, r2, #1
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
	GPIO.GPIO_Pin = USART1_TX | USART1_RX;
 80008cc:	2318      	movs	r3, #24
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	22c0      	movs	r2, #192	; 0xc0
 80008d2:	00d2      	lsls	r2, r2, #3
 80008d4:	601a      	str	r2, [r3, #0]
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
 80008d6:	2318      	movs	r3, #24
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	2203      	movs	r2, #3
 80008dc:	715a      	strb	r2, [r3, #5]
	GPIO.GPIO_Mode = GPIO_Mode_AF;
 80008de:	2318      	movs	r3, #24
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	2202      	movs	r2, #2
 80008e4:	711a      	strb	r2, [r3, #4]
	GPIO.GPIO_OType = GPIO_OType_PP;
 80008e6:	2318      	movs	r3, #24
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	719a      	strb	r2, [r3, #6]
	GPIO.GPIO_PuPd = GPIO_PuPd_UP;
 80008ee:	2318      	movs	r3, #24
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	2201      	movs	r2, #1
 80008f4:	71da      	strb	r2, [r3, #7]
	GPIO_Init(GPIOA, &GPIO);
 80008f6:	2318      	movs	r3, #24
 80008f8:	18fa      	adds	r2, r7, r3
 80008fa:	2390      	movs	r3, #144	; 0x90
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fc8d 	bl	8000220 <GPIO_Init>
	// USART1


	USART.USART_BaudRate = 9600;
 8000906:	003b      	movs	r3, r7
 8000908:	2296      	movs	r2, #150	; 0x96
 800090a:	0192      	lsls	r2, r2, #6
 800090c:	601a      	str	r2, [r3, #0]
	USART.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800090e:	003b      	movs	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
	USART.USART_WordLength = USART_WordLength_8b;
 8000914:	003b      	movs	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
	USART.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800091a:	003b      	movs	r3, r7
 800091c:	220c      	movs	r2, #12
 800091e:	611a      	str	r2, [r3, #16]
	USART.USART_Parity = USART_Parity_No;
 8000920:	003b      	movs	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
	USART.USART_StopBits = USART_StopBits_1;
 8000926:	003b      	movs	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
	USART_Init(USART1, &USART);
 800092c:	003b      	movs	r3, r7
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <initUart+0xa8>)
 8000930:	0019      	movs	r1, r3
 8000932:	0010      	movs	r0, r2
 8000934:	f7ff fec0 	bl	80006b8 <USART_Init>
	USART_Cmd( USART1, ENABLE );
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <initUart+0xa8>)
 800093a:	2101      	movs	r1, #1
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff ff75 	bl	800082c <USART_Cmd>

	//USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	    /* Enable USART1 global interrupt */
	//NVIC_EnableIRQ(USART1_IRQn);

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b008      	add	sp, #32
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40013800 	.word	0x40013800

08000950 <sendChar>:

void sendChar(uint8_t data)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	701a      	strb	r2, [r3, #0]
	while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <sendChar+0x30>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff ff80 	bl	8000868 <USART_GetFlagStatus>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d0f8      	beq.n	800095e <sendChar+0xe>
	USART1->TDR = data;
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <sendChar+0x30>)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b29b      	uxth	r3, r3
 8000974:	8513      	strh	r3, [r2, #40]	; 0x28

}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	40013800 	.word	0x40013800

08000984 <sendString>:
void sendString(char* data)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	while(*data != '\0'){
 800098c:	e006      	b.n	800099c <sendString+0x18>
		sendChar(*data++);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff ffda 	bl	8000950 <sendChar>
	USART1->TDR = data;

}
void sendString(char* data)
{
	while(*data != '\0'){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1f4      	bne.n	800098e <sendString+0xa>
		sendChar(*data++);
	}
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b002      	add	sp, #8
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b5b0      	push	{r4, r5, r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0002      	movs	r2, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b7f      	cmp	r3, #127	; 0x7f
 80009c0:	d932      	bls.n	8000a28 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80009c2:	4c2f      	ldr	r4, [pc, #188]	; (8000a80 <NVIC_SetPriority+0xd4>)
 80009c4:	1dfb      	adds	r3, r7, #7
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	001a      	movs	r2, r3
 80009ca:	230f      	movs	r3, #15
 80009cc:	4013      	ands	r3, r2
 80009ce:	3b08      	subs	r3, #8
 80009d0:	0899      	lsrs	r1, r3, #2
 80009d2:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <NVIC_SetPriority+0xd4>)
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	0018      	movs	r0, r3
 80009da:	230f      	movs	r3, #15
 80009dc:	4003      	ands	r3, r0
 80009de:	3b08      	subs	r3, #8
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	3306      	adds	r3, #6
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	18d3      	adds	r3, r2, r3
 80009e8:	3304      	adds	r3, #4
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	1dfa      	adds	r2, r7, #7
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	0010      	movs	r0, r2
 80009f2:	2203      	movs	r2, #3
 80009f4:	4002      	ands	r2, r0
 80009f6:	00d2      	lsls	r2, r2, #3
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	4090      	lsls	r0, r2
 80009fc:	0002      	movs	r2, r0
 80009fe:	43d2      	mvns	r2, r2
 8000a00:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	4018      	ands	r0, r3
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	001d      	movs	r5, r3
 8000a10:	2303      	movs	r3, #3
 8000a12:	402b      	ands	r3, r5
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	4098      	lsls	r0, r3
 8000a18:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	1d8b      	adds	r3, r1, #6
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	18e3      	adds	r3, r4, r3
 8000a22:	3304      	adds	r3, #4
 8000a24:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000a26:	e027      	b.n	8000a78 <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a28:	4c16      	ldr	r4, [pc, #88]	; (8000a84 <NVIC_SetPriority+0xd8>)
 8000a2a:	1dfb      	adds	r3, r7, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b25b      	sxtb	r3, r3
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	4914      	ldr	r1, [pc, #80]	; (8000a84 <NVIC_SetPriority+0xd8>)
 8000a34:	1dfa      	adds	r2, r7, #7
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	b252      	sxtb	r2, r2
 8000a3a:	0892      	lsrs	r2, r2, #2
 8000a3c:	32c0      	adds	r2, #192	; 0xc0
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	5852      	ldr	r2, [r2, r1]
 8000a42:	1df9      	adds	r1, r7, #7
 8000a44:	7809      	ldrb	r1, [r1, #0]
 8000a46:	0008      	movs	r0, r1
 8000a48:	2103      	movs	r1, #3
 8000a4a:	4001      	ands	r1, r0
 8000a4c:	00c9      	lsls	r1, r1, #3
 8000a4e:	20ff      	movs	r0, #255	; 0xff
 8000a50:	4088      	lsls	r0, r1
 8000a52:	0001      	movs	r1, r0
 8000a54:	43c9      	mvns	r1, r1
 8000a56:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000a58:	683a      	ldr	r2, [r7, #0]
 8000a5a:	0192      	lsls	r2, r2, #6
 8000a5c:	20ff      	movs	r0, #255	; 0xff
 8000a5e:	4010      	ands	r0, r2
 8000a60:	1dfa      	adds	r2, r7, #7
 8000a62:	7812      	ldrb	r2, [r2, #0]
 8000a64:	0015      	movs	r5, r2
 8000a66:	2203      	movs	r2, #3
 8000a68:	402a      	ands	r2, r5
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	4090      	lsls	r0, r2
 8000a6e:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000a70:	430a      	orrs	r2, r1
 8000a72:	33c0      	adds	r3, #192	; 0xc0
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <SysTick_Config+0x40>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d901      	bls.n	8000a9e <SysTick_Config+0x16>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e010      	b.n	8000ac0 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <SysTick_Config+0x44>)
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	425b      	negs	r3, r3
 8000aaa:	2103      	movs	r1, #3
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ff7d 	bl	80009ac <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SysTick_Config+0x44>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x44>)
 8000aba:	2207      	movs	r2, #7
 8000abc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	00ffffff 	.word	0x00ffffff
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <SysTick_Handler>:
**  Abstract: SysTick interrupt handler
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  timer++;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <SysTick_Handler+0x2c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	1c5a      	adds	r2, r3, #1
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <SysTick_Handler+0x2c>)
 8000adc:	601a      	str	r2, [r3, #0]
  if  (timer>2000)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <SysTick_Handler+0x2c>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	23fa      	movs	r3, #250	; 0xfa
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d905      	bls.n	8000af6 <SysTick_Handler+0x26>
  {
    timerFlag = 1;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SysTick_Handler+0x30>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
    timer = 0;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <SysTick_Handler+0x2c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
  }
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000040 	.word	0x20000040
 8000b00:	20000044 	.word	0x20000044

08000b04 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
  uint32_t ii = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitTypeDef        GPIO_InitStructure;

  /* TODO - Add your application code here */
  SysTick_Config(4800);  /* 0.1 ms = 100us if clock frequency 12 MHz */
 8000b0e:	2396      	movs	r3, #150	; 0x96
 8000b10:	015b      	lsls	r3, r3, #5
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff ffb8 	bl	8000a88 <SysTick_Config>

  SystemCoreClockUpdate();
 8000b18:	f000 f8ec 	bl	8000cf4 <SystemCoreClockUpdate>
  ii = SystemCoreClock;    /* This is a way to read the System core clock */
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <main+0xd8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  ii = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]


  /* GPIOA-C Periph clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	029b      	lsls	r3, r3, #10
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff fd63 	bl	80005f8 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	02db      	lsls	r3, r3, #11
 8000b36:	2101      	movs	r1, #1
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fd5d 	bl	80005f8 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	031b      	lsls	r3, r3, #12
 8000b42:	2101      	movs	r1, #1
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fd57 	bl	80005f8 <RCC_AHBPeriphClockCmd>
  initUart();
 8000b4a:	f7ff feab 	bl	80008a4 <initUart>

  /* Configure
   * PA0 USER Button input
   * */
  GPIO_InitStructure.GPIO_Pin = KEY;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2203      	movs	r2, #3
 8000b64:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	71da      	strb	r2, [r3, #7]
  GPIO_Init(KEY_PORT, &GPIO_InitStructure);
 8000b6c:	1d3a      	adds	r2, r7, #4
 8000b6e:	2390      	movs	r3, #144	; 0x90
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff fb53 	bl	8000220 <GPIO_Init>

  /* Configure PC8 and PC9 in output pushpull mode
   * PC8 = LD3 Green LED
   * PC9 = LD4 Blue LED
   * */
  GPIO_InitStructure.GPIO_Pin = LED1 | LED2;
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	22c0      	movs	r2, #192	; 0xc0
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2201      	movs	r2, #1
 8000b86:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2203      	movs	r2, #3
 8000b92:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	71da      	strb	r2, [r3, #7]
  GPIO_Init(LED_PORT, &GPIO_InitStructure);
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <main+0xdc>)
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	f7ff fb3d 	bl	8000220 <GPIO_Init>

  GPIO_SetBits(LED_PORT, LED1);
 8000ba6:	2380      	movs	r3, #128	; 0x80
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <main+0xdc>)
 8000bac:	0019      	movs	r1, r3
 8000bae:	0010      	movs	r0, r2
 8000bb0:	f7ff fbce 	bl	8000350 <GPIO_SetBits>
  GPIO_ResetBits(LED_PORT, LED1);
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <main+0xdc>)
 8000bba:	0019      	movs	r1, r3
 8000bbc:	0010      	movs	r0, r2
 8000bbe:	f7ff fbd7 	bl	8000370 <GPIO_ResetBits>
  LED_PORT->BSRR = LED2;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <main+0xdc>)
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	0052      	lsls	r2, r2, #1
 8000bc8:	619a      	str	r2, [r3, #24]
  LED_PORT->BRR = LED2;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <main+0xdc>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	0052      	lsls	r2, r2, #1
 8000bd0:	851a      	strh	r2, [r3, #40]	; 0x28


 sendString("napis\n");
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <main+0xe0>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fed5 	bl	8000984 <sendString>
  while (1)
  {



  }
 8000bda:	e7fe      	b.n	8000bda <main+0xd6>
 8000bdc:	20000010 	.word	0x20000010
 8000be0:	48000800 	.word	0x48000800
 8000be4:	08000f0c 	.word	0x08000f0c

08000be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bee:	e003      	b.n	8000bf8 <LoopCopyDataInit>

08000bf0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000bf2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bf4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bf6:	3104      	adds	r1, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <LoopForever+0xa>)
  ldr r3, =_edata
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <LoopForever+0xe>)
  adds r2, r0, r1
 8000bfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c00:	d3f6      	bcc.n	8000bf0 <CopyDataInit>
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopForever+0x12>)
  b LoopFillZerobss
 8000c04:	e002      	b.n	8000c0c <LoopFillZerobss>

08000c06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c08:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0a:	3204      	adds	r2, #4

08000c0c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <LoopForever+0x16>)
  cmp r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c10:	d3f9      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c12:	f000 f829 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f000 f947 	bl	8000ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1a:	f7ff ff73 	bl	8000b04 <main>

08000c1e <LoopForever>:
  
LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c20:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000c24:	08000f1c 	.word	0x08000f1c
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c2c:	20000024 	.word	0x20000024
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000c30:	20000024 	.word	0x20000024
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8000c34:	20000048 	.word	0x20000048

08000c38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_COMP_IRQHandler>
	...

08000c3c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)

08000c48 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000c4c:	e7fe      	b.n	8000c4c <HardFault_Handler+0x4>
 8000c4e:	46c0      	nop			; (mov r8, r8)

08000c50 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)

08000c5c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)

08000c68 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <SystemInit+0x74>)
 8000c6e:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <SystemInit+0x74>)
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	2101      	movs	r1, #1
 8000c74:	430a      	orrs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
#if defined (STM32F031) || defined (STM32F072) || defined (STM32F042) 
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <SystemInit+0x74>)
 8000c7a:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <SystemInit+0x74>)
 8000c7c:	6852      	ldr	r2, [r2, #4]
 8000c7e:	4918      	ldr	r1, [pc, #96]	; (8000ce0 <SystemInit+0x78>)
 8000c80:	400a      	ands	r2, r1
 8000c82:	605a      	str	r2, [r3, #4]
#endif /* STM32F031*/
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <SystemInit+0x74>)
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <SystemInit+0x74>)
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	4916      	ldr	r1, [pc, #88]	; (8000ce4 <SystemInit+0x7c>)
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <SystemInit+0x74>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <SystemInit+0x74>)
 8000c94:	6812      	ldr	r2, [r2, #0]
 8000c96:	4914      	ldr	r1, [pc, #80]	; (8000ce8 <SystemInit+0x80>)
 8000c98:	400a      	ands	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SystemInit+0x74>)
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <SystemInit+0x74>)
 8000ca0:	6852      	ldr	r2, [r2, #4]
 8000ca2:	4912      	ldr	r1, [pc, #72]	; (8000cec <SystemInit+0x84>)
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <SystemInit+0x74>)
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <SystemInit+0x74>)
 8000cac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000cae:	210f      	movs	r1, #15
 8000cb0:	438a      	bics	r2, r1
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <SystemInit+0x74>)
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <SystemInit+0x74>)
 8000cb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000cba:	490d      	ldr	r1, [pc, #52]	; (8000cf0 <SystemInit+0x88>)
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x74>)
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <SystemInit+0x74>)
 8000cc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	438a      	bics	r2, r1
 8000cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <SystemInit+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000cd2:	f000 f879 	bl	8000dc8 <SetSysClock>
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	08ffb80c 	.word	0x08ffb80c
 8000ce4:	fef6ffff 	.word	0xfef6ffff
 8000ce8:	fffbffff 	.word	0xfffbffff
 8000cec:	ffc0ffff 	.word	0xffc0ffff
 8000cf0:	fffffeac 	.word	0xfffffeac

08000cf4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <SystemCoreClockUpdate+0xc0>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	220c      	movs	r2, #12
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d007      	beq.n	8000d2a <SystemCoreClockUpdate+0x36>
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d009      	beq.n	8000d32 <SystemCoreClockUpdate+0x3e>
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d131      	bne.n	8000d86 <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <SystemCoreClockUpdate+0xc4>)
 8000d24:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <SystemCoreClockUpdate+0xc8>)
 8000d26:	601a      	str	r2, [r3, #0]
      break;
 8000d28:	e031      	b.n	8000d8e <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <SystemCoreClockUpdate+0xc4>)
 8000d2c:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <SystemCoreClockUpdate+0xc8>)
 8000d2e:	601a      	str	r2, [r3, #0]
      break;
 8000d30:	e02d      	b.n	8000d8e <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <SystemCoreClockUpdate+0xc0>)
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	23f0      	movs	r3, #240	; 0xf0
 8000d38:	039b      	lsls	r3, r3, #14
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <SystemCoreClockUpdate+0xc0>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	23c0      	movs	r3, #192	; 0xc0
 8000d44:	025b      	lsls	r3, r3, #9
 8000d46:	4013      	ands	r3, r2
 8000d48:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	3302      	adds	r3, #2
 8000d50:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d105      	bne.n	8000d64 <SystemCoreClockUpdate+0x70>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <SystemCoreClockUpdate+0xcc>)
 8000d5c:	435a      	muls	r2, r3
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <SystemCoreClockUpdate+0xc4>)
 8000d60:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 8000d62:	e014      	b.n	8000d8e <SystemCoreClockUpdate+0x9a>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <SystemCoreClockUpdate+0xc0>)
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	220f      	movs	r2, #15
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000d70:	6839      	ldr	r1, [r7, #0]
 8000d72:	4812      	ldr	r0, [pc, #72]	; (8000dbc <SystemCoreClockUpdate+0xc8>)
 8000d74:	f7ff f9c8 	bl	8000108 <__aeabi_uidiv>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	435a      	muls	r2, r3
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <SystemCoreClockUpdate+0xc4>)
 8000d82:	601a      	str	r2, [r3, #0]
      }      
      break;
 8000d84:	e003      	b.n	8000d8e <SystemCoreClockUpdate+0x9a>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <SystemCoreClockUpdate+0xc4>)
 8000d88:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <SystemCoreClockUpdate+0xc8>)
 8000d8a:	601a      	str	r2, [r3, #0]
      break;
 8000d8c:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <SystemCoreClockUpdate+0xc0>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	22f0      	movs	r2, #240	; 0xf0
 8000d94:	4013      	ands	r3, r2
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SystemCoreClockUpdate+0xd0>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <SystemCoreClockUpdate+0xc4>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	40da      	lsrs	r2, r3
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <SystemCoreClockUpdate+0xc4>)
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b004      	add	sp, #16
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	20000010 	.word	0x20000010
 8000dbc:	007a1200 	.word	0x007a1200
 8000dc0:	003d0900 	.word	0x003d0900
 8000dc4:	20000014 	.word	0x20000014

08000dc8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000dd6:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <SetSysClock+0xd4>)
 8000dd8:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <SetSysClock+0xd4>)
 8000dda:	6812      	ldr	r2, [r2, #0]
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0249      	lsls	r1, r1, #9
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <SetSysClock+0xd4>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	029b      	lsls	r3, r3, #10
 8000dec:	4013      	ands	r3, r2
 8000dee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3301      	adds	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <SetSysClock+0x3e>
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	01db      	lsls	r3, r3, #7
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d1ee      	bne.n	8000de4 <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <SetSysClock+0xd4>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	029b      	lsls	r3, r3, #10
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d002      	beq.n	8000e18 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 8000e12:	2301      	movs	r3, #1
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	e001      	b.n	8000e1c <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d138      	bne.n	8000e94 <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <SetSysClock+0xd8>)
 8000e24:	2211      	movs	r2, #17
 8000e26:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <SetSysClock+0xd4>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <SetSysClock+0xd4>)
 8000e2c:	6852      	ldr	r2, [r2, #4]
 8000e2e:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <SetSysClock+0xd4>)
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <SetSysClock+0xd4>)
 8000e34:	6852      	ldr	r2, [r2, #4]
 8000e36:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <SetSysClock+0xd4>)
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <SetSysClock+0xd4>)
 8000e3c:	6852      	ldr	r2, [r2, #4]
 8000e3e:	4919      	ldr	r1, [pc, #100]	; (8000ea4 <SetSysClock+0xdc>)
 8000e40:	400a      	ands	r2, r1
 8000e42:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <SetSysClock+0xd4>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <SetSysClock+0xd4>)
 8000e48:	6852      	ldr	r2, [r2, #4]
 8000e4a:	2188      	movs	r1, #136	; 0x88
 8000e4c:	0349      	lsls	r1, r1, #13
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <SetSysClock+0xd4>)
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <SetSysClock+0xd4>)
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0449      	lsls	r1, r1, #17
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <SetSysClock+0xd4>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	049b      	lsls	r3, r3, #18
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d0f9      	beq.n	8000e62 <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <SetSysClock+0xd4>)
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SetSysClock+0xd4>)
 8000e72:	6852      	ldr	r2, [r2, #4]
 8000e74:	2103      	movs	r1, #3
 8000e76:	438a      	bics	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <SetSysClock+0xd4>)
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <SetSysClock+0xd4>)
 8000e7e:	6852      	ldr	r2, [r2, #4]
 8000e80:	2102      	movs	r1, #2
 8000e82:	430a      	orrs	r2, r1
 8000e84:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SetSysClock+0xd4>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d1f9      	bne.n	8000e88 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40022000 	.word	0x40022000
 8000ea4:	ffc07fff 	.word	0xffc07fff

08000ea8 <__libc_init_array>:
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <__libc_init_array+0x3c>)
 8000eaa:	b570      	push	{r4, r5, r6, lr}
 8000eac:	2500      	movs	r5, #0
 8000eae:	001e      	movs	r6, r3
 8000eb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ee8 <__libc_init_array+0x40>)
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	10a4      	asrs	r4, r4, #2
 8000eb6:	42a5      	cmp	r5, r4
 8000eb8:	d004      	beq.n	8000ec4 <__libc_init_array+0x1c>
 8000eba:	00ab      	lsls	r3, r5, #2
 8000ebc:	58f3      	ldr	r3, [r6, r3]
 8000ebe:	4798      	blx	r3
 8000ec0:	3501      	adds	r5, #1
 8000ec2:	e7f8      	b.n	8000eb6 <__libc_init_array+0xe>
 8000ec4:	f000 f816 	bl	8000ef4 <_init>
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <__libc_init_array+0x44>)
 8000eca:	2500      	movs	r5, #0
 8000ecc:	001e      	movs	r6, r3
 8000ece:	4c08      	ldr	r4, [pc, #32]	; (8000ef0 <__libc_init_array+0x48>)
 8000ed0:	1ae4      	subs	r4, r4, r3
 8000ed2:	10a4      	asrs	r4, r4, #2
 8000ed4:	42a5      	cmp	r5, r4
 8000ed6:	d004      	beq.n	8000ee2 <__libc_init_array+0x3a>
 8000ed8:	00ab      	lsls	r3, r5, #2
 8000eda:	58f3      	ldr	r3, [r6, r3]
 8000edc:	4798      	blx	r3
 8000ede:	3501      	adds	r5, #1
 8000ee0:	e7f8      	b.n	8000ed4 <__libc_init_array+0x2c>
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	08000f14 	.word	0x08000f14
 8000ee8:	08000f14 	.word	0x08000f14
 8000eec:	08000f14 	.word	0x08000f14
 8000ef0:	08000f18 	.word	0x08000f18

08000ef4 <_init>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr

08000f00 <_fini>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f06:	bc08      	pop	{r3}
 8000f08:	469e      	mov	lr, r3
 8000f0a:	4770      	bx	lr
