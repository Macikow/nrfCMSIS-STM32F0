
nRFCmsisSTM32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001010  08001010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08001028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000024  0800104c  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000048  0800104c  00020048  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002da9  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000096f  00000000  00000000  00022df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000498  00000000  00000000  00023768  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  00023c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000015f4  00000000  00000000  00024020  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000154a  00000000  00000000  00025614  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00026b5e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000fac  00000000  00000000  00026bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00027b88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000ff8 	.word	0x08000ff8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08000ff8 	.word	0x08000ff8

08000108 <__aeabi_uidiv>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__aeabi_uidiv+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__aeabi_uidiv+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__aeabi_uidiv+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__aeabi_uidiv+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__aeabi_uidiv+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__aeabi_uidiv+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__aeabi_uidiv+0x6c>
 8000140:	e000      	b.n	8000144 <__aeabi_uidiv+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__aeabi_uidiv+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__aeabi_uidiv+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__aeabi_uidiv+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__aeabi_uidiv+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__aeabi_uidiv+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__aeabi_uidiv+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__aeabi_uidiv+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__aeabi_uidiv+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__aeabi_uidiv+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__aeabi_uidiv+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__aeabi_uidiv+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__aeabi_uidiv+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__aeabi_uidiv+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__aeabi_uidiv+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__aeabi_uidiv+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__aeabi_uidiv+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__aeabi_uidiv+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__aeabi_uidiv+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__aeabi_uidiv+0x100>
 8000218:	e776      	b.n	8000108 <__aeabi_uidiv>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000224:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <SystemInit+0x74>)
 8000226:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <SystemInit+0x74>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#if defined (STM32F031) || defined (STM32F072) || defined (STM32F042) 
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <SystemInit+0x74>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <SystemInit+0x74>)
 8000234:	6852      	ldr	r2, [r2, #4]
 8000236:	4918      	ldr	r1, [pc, #96]	; (8000298 <SystemInit+0x78>)
 8000238:	400a      	ands	r2, r1
 800023a:	605a      	str	r2, [r3, #4]
#endif /* STM32F031*/
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <SystemInit+0x74>)
 800023e:	4a15      	ldr	r2, [pc, #84]	; (8000294 <SystemInit+0x74>)
 8000240:	6812      	ldr	r2, [r2, #0]
 8000242:	4916      	ldr	r1, [pc, #88]	; (800029c <SystemInit+0x7c>)
 8000244:	400a      	ands	r2, r1
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000248:	4b12      	ldr	r3, [pc, #72]	; (8000294 <SystemInit+0x74>)
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <SystemInit+0x74>)
 800024c:	6812      	ldr	r2, [r2, #0]
 800024e:	4914      	ldr	r1, [pc, #80]	; (80002a0 <SystemInit+0x80>)
 8000250:	400a      	ands	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <SystemInit+0x74>)
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <SystemInit+0x74>)
 8000258:	6852      	ldr	r2, [r2, #4]
 800025a:	4912      	ldr	r1, [pc, #72]	; (80002a4 <SystemInit+0x84>)
 800025c:	400a      	ands	r2, r1
 800025e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <SystemInit+0x74>)
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <SystemInit+0x74>)
 8000264:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000266:	210f      	movs	r1, #15
 8000268:	438a      	bics	r2, r1
 800026a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <SystemInit+0x74>)
 800026e:	4a09      	ldr	r2, [pc, #36]	; (8000294 <SystemInit+0x74>)
 8000270:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <SystemInit+0x88>)
 8000274:	400a      	ands	r2, r1
 8000276:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <SystemInit+0x74>)
 800027a:	4a06      	ldr	r2, [pc, #24]	; (8000294 <SystemInit+0x74>)
 800027c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800027e:	2101      	movs	r1, #1
 8000280:	438a      	bics	r2, r1
 8000282:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <SystemInit+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 800028a:	f000 f879 	bl	8000380 <SetSysClock>
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	08ffb80c 	.word	0x08ffb80c
 800029c:	fef6ffff 	.word	0xfef6ffff
 80002a0:	fffbffff 	.word	0xfffbffff
 80002a4:	ffc0ffff 	.word	0xffc0ffff
 80002a8:	fffffeac 	.word	0xfffffeac

080002ac <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	2300      	movs	r3, #0
 80002c0:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002c2:	4b2a      	ldr	r3, [pc, #168]	; (800036c <SystemCoreClockUpdate+0xc0>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	220c      	movs	r2, #12
 80002c8:	4013      	ands	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	d007      	beq.n	80002e2 <SystemCoreClockUpdate+0x36>
 80002d2:	2b08      	cmp	r3, #8
 80002d4:	d009      	beq.n	80002ea <SystemCoreClockUpdate+0x3e>
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d131      	bne.n	800033e <SystemCoreClockUpdate+0x92>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 80002dc:	4a25      	ldr	r2, [pc, #148]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 80002de:	601a      	str	r2, [r3, #0]
      break;
 80002e0:	e031      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80002e2:	4b23      	ldr	r3, [pc, #140]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 80002e4:	4a23      	ldr	r2, [pc, #140]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 80002e6:	601a      	str	r2, [r3, #0]
      break;
 80002e8:	e02d      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002ea:	4b20      	ldr	r3, [pc, #128]	; (800036c <SystemCoreClockUpdate+0xc0>)
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	23f0      	movs	r3, #240	; 0xf0
 80002f0:	039b      	lsls	r3, r3, #14
 80002f2:	4013      	ands	r3, r2
 80002f4:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002f6:	4b1d      	ldr	r3, [pc, #116]	; (800036c <SystemCoreClockUpdate+0xc0>)
 80002f8:	685a      	ldr	r2, [r3, #4]
 80002fa:	23c0      	movs	r3, #192	; 0xc0
 80002fc:	025b      	lsls	r3, r3, #9
 80002fe:	4013      	ands	r3, r2
 8000300:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	0c9b      	lsrs	r3, r3, #18
 8000306:	3302      	adds	r3, #2
 8000308:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d105      	bne.n	800031c <SystemCoreClockUpdate+0x70>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <SystemCoreClockUpdate+0xcc>)
 8000314:	435a      	muls	r2, r3
 8000316:	4b16      	ldr	r3, [pc, #88]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 8000318:	601a      	str	r2, [r3, #0]
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
      }      
      break;
 800031a:	e014      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <SystemCoreClockUpdate+0xc0>)
 800031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000320:	220f      	movs	r2, #15
 8000322:	4013      	ands	r3, r2
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	4812      	ldr	r0, [pc, #72]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 800032c:	f7ff feec 	bl	8000108 <__aeabi_uidiv>
 8000330:	0003      	movs	r3, r0
 8000332:	001a      	movs	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	435a      	muls	r2, r3
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 800033a:	601a      	str	r2, [r3, #0]
      }      
      break;
 800033c:	e003      	b.n	8000346 <SystemCoreClockUpdate+0x9a>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 8000340:	4a0c      	ldr	r2, [pc, #48]	; (8000374 <SystemCoreClockUpdate+0xc8>)
 8000342:	601a      	str	r2, [r3, #0]
      break;
 8000344:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <SystemCoreClockUpdate+0xc0>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	22f0      	movs	r2, #240	; 0xf0
 800034c:	4013      	ands	r3, r2
 800034e:	091b      	lsrs	r3, r3, #4
 8000350:	4a0a      	ldr	r2, [pc, #40]	; (800037c <SystemCoreClockUpdate+0xd0>)
 8000352:	5cd3      	ldrb	r3, [r2, r3]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	40da      	lsrs	r2, r3
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <SystemCoreClockUpdate+0xc4>)
 8000362:	601a      	str	r2, [r3, #0]
}
 8000364:	46c0      	nop			; (mov r8, r8)
 8000366:	46bd      	mov	sp, r7
 8000368:	b004      	add	sp, #16
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40021000 	.word	0x40021000
 8000370:	20000000 	.word	0x20000000
 8000374:	007a1200 	.word	0x007a1200
 8000378:	003d0900 	.word	0x003d0900
 800037c:	20000004 	.word	0x20000004

08000380 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800038e:	4b31      	ldr	r3, [pc, #196]	; (8000454 <SetSysClock+0xd4>)
 8000390:	4a30      	ldr	r2, [pc, #192]	; (8000454 <SetSysClock+0xd4>)
 8000392:	6812      	ldr	r2, [r2, #0]
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0249      	lsls	r1, r1, #9
 8000398:	430a      	orrs	r2, r1
 800039a:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <SetSysClock+0xd4>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	029b      	lsls	r3, r3, #10
 80003a4:	4013      	ands	r3, r2
 80003a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d104      	bne.n	80003be <SetSysClock+0x3e>
 80003b4:	687a      	ldr	r2, [r7, #4]
 80003b6:	23a0      	movs	r3, #160	; 0xa0
 80003b8:	01db      	lsls	r3, r3, #7
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d1ee      	bne.n	800039c <SetSysClock+0x1c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003be:	4b25      	ldr	r3, [pc, #148]	; (8000454 <SetSysClock+0xd4>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	2380      	movs	r3, #128	; 0x80
 80003c4:	029b      	lsls	r3, r3, #10
 80003c6:	4013      	ands	r3, r2
 80003c8:	d002      	beq.n	80003d0 <SetSysClock+0x50>
  {
    HSEStatus = (uint32_t)0x01;
 80003ca:	2301      	movs	r3, #1
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	e001      	b.n	80003d4 <SetSysClock+0x54>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80003d0:	2300      	movs	r3, #0
 80003d2:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d138      	bne.n	800044c <SetSysClock+0xcc>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <SetSysClock+0xd8>)
 80003dc:	2211      	movs	r2, #17
 80003de:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <SetSysClock+0xd4>)
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <SetSysClock+0xd4>)
 80003e4:	6852      	ldr	r2, [r2, #4]
 80003e6:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <SetSysClock+0xd4>)
 80003ea:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <SetSysClock+0xd4>)
 80003ec:	6852      	ldr	r2, [r2, #4]
 80003ee:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <SetSysClock+0xd4>)
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <SetSysClock+0xd4>)
 80003f4:	6852      	ldr	r2, [r2, #4]
 80003f6:	4919      	ldr	r1, [pc, #100]	; (800045c <SetSysClock+0xdc>)
 80003f8:	400a      	ands	r2, r1
 80003fa:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <SetSysClock+0xd4>)
 80003fe:	4a15      	ldr	r2, [pc, #84]	; (8000454 <SetSysClock+0xd4>)
 8000400:	6852      	ldr	r2, [r2, #4]
 8000402:	2188      	movs	r1, #136	; 0x88
 8000404:	0349      	lsls	r1, r1, #13
 8000406:	430a      	orrs	r2, r1
 8000408:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <SetSysClock+0xd4>)
 800040c:	4a11      	ldr	r2, [pc, #68]	; (8000454 <SetSysClock+0xd4>)
 800040e:	6812      	ldr	r2, [r2, #0]
 8000410:	2180      	movs	r1, #128	; 0x80
 8000412:	0449      	lsls	r1, r1, #17
 8000414:	430a      	orrs	r2, r1
 8000416:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <SetSysClock+0xd4>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	049b      	lsls	r3, r3, #18
 8000422:	4013      	ands	r3, r2
 8000424:	d0f9      	beq.n	800041a <SetSysClock+0x9a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <SetSysClock+0xd4>)
 8000428:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <SetSysClock+0xd4>)
 800042a:	6852      	ldr	r2, [r2, #4]
 800042c:	2103      	movs	r1, #3
 800042e:	438a      	bics	r2, r1
 8000430:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <SetSysClock+0xd4>)
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <SetSysClock+0xd4>)
 8000436:	6852      	ldr	r2, [r2, #4]
 8000438:	2102      	movs	r1, #2
 800043a:	430a      	orrs	r2, r1
 800043c:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SetSysClock+0xd4>)
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	220c      	movs	r2, #12
 8000446:	4013      	ands	r3, r2
 8000448:	2b08      	cmp	r3, #8
 800044a:	d1f9      	bne.n	8000440 <SetSysClock+0xc0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }  
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	40022000 	.word	0x40022000
 800045c:	ffc07fff 	.word	0xffc07fff

08000460 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000470:	e7fe      	b.n	8000470 <HardFault_Handler+0x4>
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800048e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000490:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000492:	e003      	b.n	800049c <LoopCopyDataInit>

08000494 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000496:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000498:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800049a:	3104      	adds	r1, #4

0800049c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800049c:	480b      	ldr	r0, [pc, #44]	; (80004cc <LoopForever+0xa>)
  ldr r3, =_edata
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <LoopForever+0xe>)
  adds r2, r0, r1
 80004a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004a4:	d3f6      	bcc.n	8000494 <CopyDataInit>
  ldr r2, =_sbss
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <LoopForever+0x12>)
  b LoopFillZerobss
 80004a8:	e002      	b.n	80004b0 <LoopFillZerobss>

080004aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  str  r3, [r2]
 80004ac:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ae:	3204      	adds	r2, #4

080004b0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <LoopForever+0x16>)
  cmp r2, r3
 80004b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004b4:	d3f9      	bcc.n	80004aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004b6:	f7ff feb3 	bl	8000220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ba:	f000 fd77 	bl	8000fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f000 f8bb 	bl	8000638 <main>

080004c2 <LoopForever>:
  
LoopForever:
    b LoopForever
 80004c2:	e7fe      	b.n	80004c2 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80004c8:	08001028 	.word	0x08001028
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004d0:	20000024 	.word	0x20000024
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80004d4:	20000024 	.word	0x20000024
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 80004d8:	20000048 	.word	0x20000048

080004dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004dc:	e7fe      	b.n	80004dc <ADC1_COMP_IRQHandler>
	...

080004e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	0002      	movs	r2, r0
 80004e8:	6039      	str	r1, [r7, #0]
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b7f      	cmp	r3, #127	; 0x7f
 80004f4:	d932      	bls.n	800055c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80004f6:	4c2f      	ldr	r4, [pc, #188]	; (80005b4 <NVIC_SetPriority+0xd4>)
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	001a      	movs	r2, r3
 80004fe:	230f      	movs	r3, #15
 8000500:	4013      	ands	r3, r2
 8000502:	3b08      	subs	r3, #8
 8000504:	0899      	lsrs	r1, r3, #2
 8000506:	4a2b      	ldr	r2, [pc, #172]	; (80005b4 <NVIC_SetPriority+0xd4>)
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	0018      	movs	r0, r3
 800050e:	230f      	movs	r3, #15
 8000510:	4003      	ands	r3, r0
 8000512:	3b08      	subs	r3, #8
 8000514:	089b      	lsrs	r3, r3, #2
 8000516:	3306      	adds	r3, #6
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	18d3      	adds	r3, r2, r3
 800051c:	3304      	adds	r3, #4
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	1dfa      	adds	r2, r7, #7
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	0010      	movs	r0, r2
 8000526:	2203      	movs	r2, #3
 8000528:	4002      	ands	r2, r0
 800052a:	00d2      	lsls	r2, r2, #3
 800052c:	20ff      	movs	r0, #255	; 0xff
 800052e:	4090      	lsls	r0, r2
 8000530:	0002      	movs	r2, r0
 8000532:	43d2      	mvns	r2, r2
 8000534:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	019b      	lsls	r3, r3, #6
 800053a:	20ff      	movs	r0, #255	; 0xff
 800053c:	4018      	ands	r0, r3
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	001d      	movs	r5, r3
 8000544:	2303      	movs	r3, #3
 8000546:	402b      	ands	r3, r5
 8000548:	00db      	lsls	r3, r3, #3
 800054a:	4098      	lsls	r0, r3
 800054c:	0003      	movs	r3, r0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800054e:	431a      	orrs	r2, r3
 8000550:	1d8b      	adds	r3, r1, #6
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	18e3      	adds	r3, r4, r3
 8000556:	3304      	adds	r3, #4
 8000558:	601a      	str	r2, [r3, #0]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800055a:	e027      	b.n	80005ac <NVIC_SetPriority+0xcc>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800055c:	4c16      	ldr	r4, [pc, #88]	; (80005b8 <NVIC_SetPriority+0xd8>)
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	b25b      	sxtb	r3, r3
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	4914      	ldr	r1, [pc, #80]	; (80005b8 <NVIC_SetPriority+0xd8>)
 8000568:	1dfa      	adds	r2, r7, #7
 800056a:	7812      	ldrb	r2, [r2, #0]
 800056c:	b252      	sxtb	r2, r2
 800056e:	0892      	lsrs	r2, r2, #2
 8000570:	32c0      	adds	r2, #192	; 0xc0
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	5852      	ldr	r2, [r2, r1]
 8000576:	1df9      	adds	r1, r7, #7
 8000578:	7809      	ldrb	r1, [r1, #0]
 800057a:	0008      	movs	r0, r1
 800057c:	2103      	movs	r1, #3
 800057e:	4001      	ands	r1, r0
 8000580:	00c9      	lsls	r1, r1, #3
 8000582:	20ff      	movs	r0, #255	; 0xff
 8000584:	4088      	lsls	r0, r1
 8000586:	0001      	movs	r1, r0
 8000588:	43c9      	mvns	r1, r1
 800058a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	0192      	lsls	r2, r2, #6
 8000590:	20ff      	movs	r0, #255	; 0xff
 8000592:	4010      	ands	r0, r2
 8000594:	1dfa      	adds	r2, r7, #7
 8000596:	7812      	ldrb	r2, [r2, #0]
 8000598:	0015      	movs	r5, r2
 800059a:	2203      	movs	r2, #3
 800059c:	402a      	ands	r2, r5
 800059e:	00d2      	lsls	r2, r2, #3
 80005a0:	4090      	lsls	r0, r2
 80005a2:	0002      	movs	r2, r0
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80005a4:	430a      	orrs	r2, r1
 80005a6:	33c0      	adds	r3, #192	; 0xc0
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	511a      	str	r2, [r3, r4]
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bdb0      	pop	{r4, r5, r7, pc}
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	e000e100 	.word	0xe000e100

080005bc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <SysTick_Config+0x40>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d901      	bls.n	80005d2 <SysTick_Config+0x16>
 80005ce:	2301      	movs	r3, #1
 80005d0:	e010      	b.n	80005f4 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <SysTick_Config+0x44>)
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	3a01      	subs	r2, #1
 80005d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80005da:	2301      	movs	r3, #1
 80005dc:	425b      	negs	r3, r3
 80005de:	2103      	movs	r1, #3
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff7d 	bl	80004e0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SysTick_Config+0x44>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SysTick_Config+0x44>)
 80005ee:	2207      	movs	r2, #7
 80005f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80005f2:	2300      	movs	r3, #0
}
 80005f4:	0018      	movs	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	00ffffff 	.word	0x00ffffff
 8000600:	e000e010 	.word	0xe000e010

08000604 <SysTick_Handler>:
**  Abstract: SysTick interrupt handler
**
**===========================================================================
*/
void SysTick_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  timer++;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <SysTick_Handler+0x2c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <SysTick_Handler+0x2c>)
 8000610:	601a      	str	r2, [r3, #0]
  if  (timer>2000)
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <SysTick_Handler+0x2c>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	23fa      	movs	r3, #250	; 0xfa
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	429a      	cmp	r2, r3
 800061c:	d905      	bls.n	800062a <SysTick_Handler+0x26>
  {
    timerFlag = 1;
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SysTick_Handler+0x30>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
    timer = 0;
 8000624:	4b02      	ldr	r3, [pc, #8]	; (8000630 <SysTick_Handler+0x2c>)
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
  }
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000040 	.word	0x20000040
 8000634:	20000044 	.word	0x20000044

08000638 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
  uint32_t ii = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  GPIO_InitTypeDef        GPIO_InitStructure;

  /* TODO - Add your application code here */
  SysTick_Config(4800);  /* 0.1 ms = 100us if clock frequency 12 MHz */
 8000642:	2396      	movs	r3, #150	; 0x96
 8000644:	015b      	lsls	r3, r3, #5
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff ffb8 	bl	80005bc <SysTick_Config>

  SystemCoreClockUpdate();
 800064c:	f7ff fe2e 	bl	80002ac <SystemCoreClockUpdate>
  ii = SystemCoreClock;    /* This is a way to read the System core clock */
 8000650:	4b4a      	ldr	r3, [pc, #296]	; (800077c <main+0x144>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	60fb      	str	r3, [r7, #12]
  ii = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]



  /* GPIOA-C Periph clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800065a:	2380      	movs	r3, #128	; 0x80
 800065c:	029b      	lsls	r3, r3, #10
 800065e:	2101      	movs	r1, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fb67 	bl	8000d34 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	02db      	lsls	r3, r3, #11
 800066a:	2101      	movs	r1, #1
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fb61 	bl	8000d34 <RCC_AHBPeriphClockCmd>
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	031b      	lsls	r3, r3, #12
 8000676:	2101      	movs	r1, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fb5b 	bl	8000d34 <RCC_AHBPeriphClockCmd>
  initUart();
 800067e:	f000 f885 	bl	800078c <initUart>

  /* Configure
   * PA0 USER Button input
   * */
  GPIO_InitStructure.GPIO_Pin = KEY;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2200      	movs	r2, #0
 800068c:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2203      	movs	r2, #3
 8000698:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	71da      	strb	r2, [r3, #7]
  GPIO_Init(KEY_PORT, &GPIO_InitStructure);
 80006a0:	1d3a      	adds	r2, r7, #4
 80006a2:	2390      	movs	r3, #144	; 0x90
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fba3 	bl	8000df4 <GPIO_Init>

  /* Configure PC8 and PC9 in output pushpull mode
   * PC8 = LD3 Green LED
   * PC9 = LD4 Blue LED
   * */
  GPIO_InitStructure.GPIO_Pin = LED1 | LED2;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	22c0      	movs	r2, #192	; 0xc0
 80006b2:	0092      	lsls	r2, r2, #2
 80006b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2201      	movs	r2, #1
 80006ba:	711a      	strb	r2, [r3, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	719a      	strb	r2, [r3, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2203      	movs	r2, #3
 80006c6:	715a      	strb	r2, [r3, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	71da      	strb	r2, [r3, #7]
  GPIO_Init(LED_PORT, &GPIO_InitStructure);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4a2b      	ldr	r2, [pc, #172]	; (8000780 <main+0x148>)
 80006d2:	0019      	movs	r1, r3
 80006d4:	0010      	movs	r0, r2
 80006d6:	f000 fb8d 	bl	8000df4 <GPIO_Init>

  GPIO_SetBits(LED_PORT, LED1);
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4a28      	ldr	r2, [pc, #160]	; (8000780 <main+0x148>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	0010      	movs	r0, r2
 80006e4:	f000 fc42 	bl	8000f6c <GPIO_SetBits>
  GPIO_ResetBits(LED_PORT, LED1);
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4a24      	ldr	r2, [pc, #144]	; (8000780 <main+0x148>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f000 fc4b 	bl	8000f8c <GPIO_ResetBits>
  LED_PORT->BSRR = LED2;
 80006f6:	4b22      	ldr	r3, [pc, #136]	; (8000780 <main+0x148>)
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	619a      	str	r2, [r3, #24]
  LED_PORT->BRR = LED2;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <main+0x148>)
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	851a      	strh	r2, [r3, #40]	; 0x28

  while (1)
  {


	  if (timerFlag)
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <main+0x14c>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d01a      	beq.n	8000744 <main+0x10c>
	  {
		  timerFlag = 0;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <main+0x14c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
		  ii++;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
		  sendString("cos tam napisz");
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <main+0x150>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 f89d 	bl	800085c <sendString>
		  /* Toggle LED1 */
		  if (ii == 1)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d104      	bne.n	8000732 <main+0xfa>
		  {
			  LED_PORT->BSRR = LED1;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <main+0x148>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	619a      	str	r2, [r3, #24]
 8000730:	e008      	b.n	8000744 <main+0x10c>
		  }
		  else if (ii == 2)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d105      	bne.n	8000744 <main+0x10c>
		  {
			  ii = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
			  LED_PORT->BRR = LED1;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <main+0x148>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	0092      	lsls	r2, r2, #2
 8000742:	851a      	strh	r2, [r3, #40]	; 0x28
		  }
	  }
      if(GPIO_ReadInputDataBit(KEY_PORT, KEY))
 8000744:	2390      	movs	r3, #144	; 0x90
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	2101      	movs	r1, #1
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fbea 	bl	8000f24 <GPIO_ReadInputDataBit>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d00a      	beq.n	800076a <main+0x132>
	  {
		  /* USER key pressed */
		  if (ii == 1)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d1d5      	bne.n	8000706 <main+0xce>
		  {
			  GPIO_SetBits(LED_PORT, LED2);
 800075a:	2380      	movs	r3, #128	; 0x80
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <main+0x148>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f000 fc02 	bl	8000f6c <GPIO_SetBits>
 8000768:	e7cd      	b.n	8000706 <main+0xce>
		  }
	  }
	  else
	  {
		  GPIO_ResetBits(LED_PORT, LED2);
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <main+0x148>)
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f000 fc0a 	bl	8000f8c <GPIO_ResetBits>
	  }
  }
 8000778:	e7c5      	b.n	8000706 <main+0xce>
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	20000000 	.word	0x20000000
 8000780:	48000800 	.word	0x48000800
 8000784:	20000044 	.word	0x20000044
 8000788:	08001010 	.word	0x08001010

0800078c <initUart>:
#define USART1_RX GPIO_Pin_10



void initUart(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO;	// struktura do gpio
	USART_InitTypeDef USART; 		//  struktura do USART1

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 , ENABLE); // wlaczenie taktowanie ukdu usart1
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	01db      	lsls	r3, r3, #7
 8000796:	2101      	movs	r1, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f000 faeb 	bl	8000d74 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_AHBPeriph_GPIOA , ENABLE); //  wczenie taktowania portu I/O
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	029b      	lsls	r3, r3, #10
 80007a2:	2101      	movs	r1, #1
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fb05 	bl	8000db4 <RCC_APB1PeriphClockCmd>


	// GPIO  init
	//GPIO_PinAFConfig(GPIOA, USART1_TX, USART1);
	GPIOA->AFR[1] = (1 << 4) | (1 << 8);
 80007aa:	2390      	movs	r3, #144	; 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2288      	movs	r2, #136	; 0x88
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
	GPIO.GPIO_Mode = GPIO_Mode_AF;
 80007b4:	2318      	movs	r3, #24
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	2202      	movs	r2, #2
 80007ba:	711a      	strb	r2, [r3, #4]
	GPIO.GPIO_Pin = USART1_TX;
 80007bc:	2318      	movs	r3, #24
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	601a      	str	r2, [r3, #0]
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
 80007c6:	2318      	movs	r3, #24
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	2203      	movs	r2, #3
 80007cc:	715a      	strb	r2, [r3, #5]
	GPIO_Init( GPIOA, &GPIO );
 80007ce:	2318      	movs	r3, #24
 80007d0:	18fa      	adds	r2, r7, r3
 80007d2:	2390      	movs	r3, #144	; 0x90
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fb0b 	bl	8000df4 <GPIO_Init>
	GPIO.GPIO_Mode = GPIO_Mode_IN;
 80007de:	2318      	movs	r3, #24
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	711a      	strb	r2, [r3, #4]
	GPIO.GPIO_Speed  = GPIO_Speed_50MHz;
 80007e6:	2318      	movs	r3, #24
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	2203      	movs	r2, #3
 80007ec:	715a      	strb	r2, [r3, #5]
	GPIO.GPIO_Pin = USART1_RX;
 80007ee:	2318      	movs	r3, #24
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	00d2      	lsls	r2, r2, #3
 80007f6:	601a      	str	r2, [r3, #0]
	GPIO_Init( GPIOA, &GPIO );
 80007f8:	2318      	movs	r3, #24
 80007fa:	18fa      	adds	r2, r7, r3
 80007fc:	2390      	movs	r3, #144	; 0x90
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f000 faf6 	bl	8000df4 <GPIO_Init>
	// USART1
	USART_Cmd( USART1, ENABLE );
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <initUart+0xc8>)
 800080a:	2101      	movs	r1, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f000 f8fb 	bl	8000a08 <USART_Cmd>

	USART.USART_BaudRate = 9600;
 8000812:	003b      	movs	r3, r7
 8000814:	2296      	movs	r2, #150	; 0x96
 8000816:	0192      	lsls	r2, r2, #6
 8000818:	601a      	str	r2, [r3, #0]
	USART.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800081a:	003b      	movs	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
	USART.USART_WordLength = USART_WordLength_8b;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
	USART.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000826:	003b      	movs	r3, r7
 8000828:	220c      	movs	r2, #12
 800082a:	611a      	str	r2, [r3, #16]
	USART.USART_StopBits = USART_StopBits_1;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
	USART_Init(USART1, &USART);
 8000832:	003b      	movs	r3, r7
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <initUart+0xc8>)
 8000836:	0019      	movs	r1, r3
 8000838:	0010      	movs	r0, r2
 800083a:	f000 f82b 	bl	8000894 <USART_Init>

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800083e:	4906      	ldr	r1, [pc, #24]	; (8000858 <initUart+0xcc>)
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <initUart+0xc8>)
 8000842:	2201      	movs	r2, #1
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f8fd 	bl	8000a44 <USART_ITConfig>
	    /* Enable USART1 global interrupt */
	//NVIC_EnableIRQ(USART1_IRQn);

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b008      	add	sp, #32
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40013800 	.word	0x40013800
 8000858:	00050105 	.word	0x00050105

0800085c <sendString>:
{
	USART1->TDR = data;
}

void sendString(char* data)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	while(*data == '\0')
 8000864:	e00c      	b.n	8000880 <sendString+0x24>
	{
		USART1->TDR = *(data++);
 8000866:	490a      	ldr	r1, [pc, #40]	; (8000890 <sendString+0x34>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	607a      	str	r2, [r7, #4]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b29b      	uxth	r3, r3
 8000872:	850b      	strh	r3, [r1, #40]	; 0x28
		while(!(USART1->ISR & USART_ISR_TXE)) // TXCIE - transmission complete 7 bit
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <sendString+0x34>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	4013      	ands	r3, r2
 800087e:	d0fa      	beq.n	8000876 <sendString+0x1a>
	USART1->TDR = data;
}

void sendString(char* data)
{
	while(*data == '\0')
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0ee      	beq.n	8000866 <sendString+0xa>
		while(!(USART1->ISR & USART_ISR_TXE)) // TXCIE - transmission complete 7 bit
		{
			// do nothing - wiat
		}
	}
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40013800 	.word	0x40013800

08000894 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08e      	sub	sp, #56	; 0x38
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2201      	movs	r2, #1
 80008b0:	4393      	bics	r3, r2
 80008b2:	001a      	movs	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c0:	4a4b      	ldr	r2, [pc, #300]	; (80009f0 <USART_Init+0x15c>)
 80008c2:	4013      	ands	r3, r2
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008cc:	4313      	orrs	r3, r2
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008d4:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008de:	4a45      	ldr	r2, [pc, #276]	; (80009f4 <USART_Init+0x160>)
 80008e0:	4013      	ands	r3, r2
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	431a      	orrs	r2, r3
    USART_InitStruct->USART_Mode;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	691b      	ldr	r3, [r3, #16]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008f2:	4313      	orrs	r3, r2
 80008f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f6:	4313      	orrs	r3, r2
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008fe:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000908:	4a3b      	ldr	r2, [pc, #236]	; (80009f8 <USART_Init+0x164>)
 800090a:	4013      	ands	r3, r2
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000914:	4313      	orrs	r3, r2
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800091c:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800091e:	2308      	movs	r3, #8
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f8d2 	bl	8000acc <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a34      	ldr	r2, [pc, #208]	; (80009fc <USART_Init+0x168>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d104      	bne.n	800093a <USART_Init+0xa6>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8000930:	2308      	movs	r3, #8
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
 8000938:	e00c      	b.n	8000954 <USART_Init+0xc0>
  }
  else if (USARTx == USART2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <USART_Init+0x16c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d104      	bne.n	800094c <USART_Init+0xb8>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8000942:	2308      	movs	r3, #8
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	69db      	ldr	r3, [r3, #28]
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
 800094a:	e003      	b.n	8000954 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 800094c:	2308      	movs	r3, #8
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	4013      	ands	r3, r2
 800095e:	d014      	beq.n	800098a <USART_Init+0xf6>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000962:	005a      	lsls	r2, r3, #1
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	0019      	movs	r1, r3
 800096a:	0010      	movs	r0, r2
 800096c:	f7ff fbcc 	bl	8000108 <__aeabi_uidiv>
 8000970:	0003      	movs	r3, r0
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 8000974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000976:	005a      	lsls	r2, r3, #1
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	0019      	movs	r1, r3
 800097e:	0010      	movs	r0, r2
 8000980:	f7ff fc48 	bl	8000214 <__aeabi_uidivmod>
 8000984:	000b      	movs	r3, r1
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000988:	e010      	b.n	80009ac <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	0019      	movs	r1, r3
 8000990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000992:	f7ff fbb9 	bl	8000108 <__aeabi_uidiv>
 8000996:	0003      	movs	r3, r0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f7ff fc36 	bl	8000214 <__aeabi_uidivmod>
 80009a8:	000b      	movs	r3, r1
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	085a      	lsrs	r2, r3, #1
 80009b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d802      	bhi.n	80009be <USART_Init+0x12a>
  {
    divider++;
 80009b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ba:	3301      	adds	r3, #1
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	4013      	ands	r3, r2
 80009c8:	d00a      	beq.n	80009e0 <USART_Init+0x14c>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 80009ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	2207      	movs	r2, #7
 80009d0:	4013      	ands	r3, r2
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80009d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <USART_Init+0x170>)
 80009d8:	401a      	ands	r2, r3
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4313      	orrs	r3, r2
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	819a      	strh	r2, [r3, #12]
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b00e      	add	sp, #56	; 0x38
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	ffffcfff 	.word	0xffffcfff
 80009f4:	ffffe9f3 	.word	0xffffe9f3
 80009f8:	fffffcff 	.word	0xfffffcff
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40004400 	.word	0x40004400
 8000a04:	0000fff0 	.word	0x0000fff0

08000a08 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	000a      	movs	r2, r1
 8000a12:	1cfb      	adds	r3, r7, #3
 8000a14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a16:	1cfb      	adds	r3, r7, #3
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d006      	beq.n	8000a2c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2201      	movs	r2, #1
 8000a24:	431a      	orrs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  }
}
 8000a2a:	e006      	b.n	8000a3a <USART_Cmd+0x32>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2201      	movs	r2, #1
 8000a32:	4393      	bics	r3, r2
 8000a34:	001a      	movs	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
  }
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)

08000a44 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	701a      	strb	r2, [r3, #0]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	61fb      	str	r3, [r7, #28]
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	121b      	asrs	r3, r3, #8
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	23ff      	movs	r3, #255	; 0xff
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	22ff      	movs	r2, #255	; 0xff
 8000a76:	4013      	ands	r3, r2
 8000a78:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d103      	bne.n	8000a92 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x04;
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e005      	b.n	8000a9e <USART_ITConfig+0x5a>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d102      	bne.n	8000a9e <USART_ITConfig+0x5a>
  {
    usartxbase += 0x08;
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d006      	beq.n	8000ab4 <USART_ITConfig+0x70>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	69fa      	ldr	r2, [r7, #28]
 8000aaa:	6811      	ldr	r1, [r2, #0]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ab2:	e006      	b.n	8000ac2 <USART_ITConfig+0x7e>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	6939      	ldr	r1, [r7, #16]
 8000abc:	43c9      	mvns	r1, r1
 8000abe:	400a      	ands	r2, r1
 8000ac0:	601a      	str	r2, [r3, #0]
  }
}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b008      	add	sp, #32
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)

08000acc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000aec:	4b8a      	ldr	r3, [pc, #552]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	220c      	movs	r2, #12
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d00c      	beq.n	8000b16 <RCC_GetClocksFreq+0x4a>
 8000afc:	d802      	bhi.n	8000b04 <RCC_GetClocksFreq+0x38>
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d005      	beq.n	8000b0e <RCC_GetClocksFreq+0x42>
 8000b02:	e03b      	b.n	8000b7c <RCC_GetClocksFreq+0xb0>
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	d00a      	beq.n	8000b1e <RCC_GetClocksFreq+0x52>
 8000b08:	2b0c      	cmp	r3, #12
 8000b0a:	d033      	beq.n	8000b74 <RCC_GetClocksFreq+0xa8>
 8000b0c:	e036      	b.n	8000b7c <RCC_GetClocksFreq+0xb0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a82      	ldr	r2, [pc, #520]	; (8000d1c <RCC_GetClocksFreq+0x250>)
 8000b12:	601a      	str	r2, [r3, #0]
      break;
 8000b14:	e036      	b.n	8000b84 <RCC_GetClocksFreq+0xb8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a80      	ldr	r2, [pc, #512]	; (8000d1c <RCC_GetClocksFreq+0x250>)
 8000b1a:	601a      	str	r2, [r3, #0]
      break;
 8000b1c:	e032      	b.n	8000b84 <RCC_GetClocksFreq+0xb8>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000b1e:	4b7e      	ldr	r3, [pc, #504]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	23f0      	movs	r3, #240	; 0xf0
 8000b24:	039b      	lsls	r3, r3, #14
 8000b26:	4013      	ands	r3, r2
 8000b28:	617b      	str	r3, [r7, #20]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	23c0      	movs	r3, #192	; 0xc0
 8000b30:	025b      	lsls	r3, r3, #9
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
      pllmull = ( pllmull >> 18) + 2;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	0c9b      	lsrs	r3, r3, #18
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
      
      if (pllsource == 0x00)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d104      	bne.n	8000b4e <RCC_GetClocksFreq+0x82>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	4a76      	ldr	r2, [pc, #472]	; (8000d20 <RCC_GetClocksFreq+0x254>)
 8000b48:	4353      	muls	r3, r2
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	e00e      	b.n	8000b6c <RCC_GetClocksFreq+0xa0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000b4e:	4b72      	ldr	r3, [pc, #456]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	220f      	movs	r2, #15
 8000b54:	4013      	ands	r3, r2
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8000b5a:	68f9      	ldr	r1, [r7, #12]
 8000b5c:	486f      	ldr	r0, [pc, #444]	; (8000d1c <RCC_GetClocksFreq+0x250>)
 8000b5e:	f7ff fad3 	bl	8000108 <__aeabi_uidiv>
 8000b62:	0003      	movs	r3, r0
 8000b64:	001a      	movs	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	4353      	muls	r3, r2
 8000b6a:	61fb      	str	r3, [r7, #28]
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	601a      	str	r2, [r3, #0]
      break;
 8000b72:	e007      	b.n	8000b84 <RCC_GetClocksFreq+0xb8>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a6b      	ldr	r2, [pc, #428]	; (8000d24 <RCC_GetClocksFreq+0x258>)
 8000b78:	601a      	str	r2, [r3, #0]
      break;
 8000b7a:	e003      	b.n	8000b84 <RCC_GetClocksFreq+0xb8>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a67      	ldr	r2, [pc, #412]	; (8000d1c <RCC_GetClocksFreq+0x250>)
 8000b80:	601a      	str	r2, [r3, #0]
      break;
 8000b82:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000b84:	4b64      	ldr	r3, [pc, #400]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	22f0      	movs	r2, #240	; 0xf0
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp]; 
 8000b94:	4a64      	ldr	r2, [pc, #400]	; (8000d28 <RCC_GetClocksFreq+0x25c>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	40da      	lsrs	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	605a      	str	r2, [r3, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8000bac:	4b5a      	ldr	r3, [pc, #360]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	23e0      	movs	r3, #224	; 0xe0
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 8;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000bbe:	4a5a      	ldr	r2, [pc, #360]	; (8000d28 <RCC_GetClocksFreq+0x25c>)
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	18d3      	adds	r3, r2, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	60bb      	str	r3, [r7, #8]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	40da      	lsrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	609a      	str	r2, [r3, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8000bd6:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4013      	ands	r3, r2
 8000be0:	d103      	bne.n	8000bea <RCC_GetClocksFreq+0x11e>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a51      	ldr	r2, [pc, #324]	; (8000d2c <RCC_GetClocksFreq+0x260>)
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	e010      	b.n	8000c0c <RCC_GetClocksFreq+0x140>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	2380      	movs	r3, #128	; 0x80
 8000bf0:	01db      	lsls	r3, r3, #7
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d105      	bne.n	8000c02 <RCC_GetClocksFreq+0x136>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	085a      	lsrs	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	e004      	b.n	8000c0c <RCC_GetClocksFreq+0x140>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	089a      	lsrs	r2, r3, #2
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	60da      	str	r2, [r3, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000c0c:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	2240      	movs	r2, #64	; 0x40
 8000c12:	4013      	ands	r3, r2
 8000c14:	d103      	bne.n	8000c1e <RCC_GetClocksFreq+0x152>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a45      	ldr	r2, [pc, #276]	; (8000d30 <RCC_GetClocksFreq+0x264>)
 8000c1a:	611a      	str	r2, [r3, #16]
 8000c1c:	e003      	b.n	8000c26 <RCC_GetClocksFreq+0x15a>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	611a      	str	r2, [r3, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	2210      	movs	r2, #16
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d103      	bne.n	8000c38 <RCC_GetClocksFreq+0x16c>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a3a      	ldr	r2, [pc, #232]	; (8000d1c <RCC_GetClocksFreq+0x250>)
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	e003      	b.n	8000c40 <RCC_GetClocksFreq+0x174>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	615a      	str	r2, [r3, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000c40:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	2203      	movs	r2, #3
 8000c46:	4013      	ands	r3, r2
 8000c48:	d104      	bne.n	8000c54 <RCC_GetClocksFreq+0x188>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	e01e      	b.n	8000c92 <RCC_GetClocksFreq+0x1c6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000c54:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	2203      	movs	r2, #3
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d104      	bne.n	8000c6a <RCC_GetClocksFreq+0x19e>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
 8000c68:	e013      	b.n	8000c92 <RCC_GetClocksFreq+0x1c6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	2203      	movs	r2, #3
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d104      	bne.n	8000c80 <RCC_GetClocksFreq+0x1b4>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	0212      	lsls	r2, r2, #8
 8000c7c:	619a      	str	r2, [r3, #24]
 8000c7e:	e008      	b.n	8000c92 <RCC_GetClocksFreq+0x1c6>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	2203      	movs	r2, #3
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d102      	bne.n	8000c92 <RCC_GetClocksFreq+0x1c6>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <RCC_GetClocksFreq+0x250>)
 8000c90:	619a      	str	r2, [r3, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c96:	23c0      	movs	r3, #192	; 0xc0
 8000c98:	029b      	lsls	r3, r3, #10
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d104      	bne.n	8000ca8 <RCC_GetClocksFreq+0x1dc>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	61da      	str	r2, [r3, #28]
 8000ca6:	e027      	b.n	8000cf8 <RCC_GetClocksFreq+0x22c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cac:	23c0      	movs	r3, #192	; 0xc0
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d104      	bne.n	8000cc4 <RCC_GetClocksFreq+0x1f8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	61da      	str	r2, [r3, #28]
 8000cc2:	e019      	b.n	8000cf8 <RCC_GetClocksFreq+0x22c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	029b      	lsls	r3, r3, #10
 8000ccc:	401a      	ands	r2, r3
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	029b      	lsls	r3, r3, #10
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d104      	bne.n	8000ce0 <RCC_GetClocksFreq+0x214>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	0212      	lsls	r2, r2, #8
 8000cdc:	61da      	str	r2, [r3, #28]
 8000cde:	e00b      	b.n	8000cf8 <RCC_GetClocksFreq+0x22c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ce4:	23c0      	movs	r3, #192	; 0xc0
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	401a      	ands	r2, r3
 8000cea:	23c0      	movs	r3, #192	; 0xc0
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d102      	bne.n	8000cf8 <RCC_GetClocksFreq+0x22c>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <RCC_GetClocksFreq+0x250>)
 8000cf6:	61da      	str	r2, [r3, #28]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <RCC_GetClocksFreq+0x24c>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d103      	bne.n	8000d0a <RCC_GetClocksFreq+0x23e>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <RCC_GetClocksFreq+0x258>)
 8000d06:	621a      	str	r2, [r3, #32]
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 8000d08:	e002      	b.n	8000d10 <RCC_GetClocksFreq+0x244>
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
  }
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	621a      	str	r2, [r3, #32]
  }   
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b008      	add	sp, #32
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	007a1200 	.word	0x007a1200
 8000d20:	003d0900 	.word	0x003d0900
 8000d24:	02dc6c00 	.word	0x02dc6c00
 8000d28:	20000014 	.word	0x20000014
 8000d2c:	00d59f80 	.word	0x00d59f80
 8000d30:	00008012 	.word	0x00008012

08000d34 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	1cfb      	adds	r3, r7, #3
 8000d40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d42:	1cfb      	adds	r3, r7, #3
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d006      	beq.n	8000d58 <RCC_AHBPeriphClockCmd+0x24>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d4c:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d4e:	6951      	ldr	r1, [r2, #20]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	615a      	str	r2, [r3, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000d56:	e006      	b.n	8000d66 <RCC_AHBPeriphClockCmd+0x32>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <RCC_AHBPeriphClockCmd+0x3c>)
 8000d5c:	6952      	ldr	r2, [r2, #20]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	43c9      	mvns	r1, r1
 8000d62:	400a      	ands	r2, r1
 8000d64:	615a      	str	r2, [r3, #20]
  }
}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40021000 	.word	0x40021000

08000d74 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	000a      	movs	r2, r1
 8000d7e:	1cfb      	adds	r3, r7, #3
 8000d80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d82:	1cfb      	adds	r3, r7, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <RCC_APB2PeriphClockCmd+0x24>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d8e:	6991      	ldr	r1, [r2, #24]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000d96:	e006      	b.n	8000da6 <RCC_APB2PeriphClockCmd+0x32>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d9c:	6992      	ldr	r2, [r2, #24]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	43c9      	mvns	r1, r1
 8000da2:	400a      	ands	r2, r1
 8000da4:	619a      	str	r2, [r3, #24]
  }
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b002      	add	sp, #8
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000

08000db4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	000a      	movs	r2, r1
 8000dbe:	1cfb      	adds	r3, r7, #3
 8000dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dc2:	1cfb      	adds	r3, r7, #3
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d006      	beq.n	8000dd8 <RCC_APB1PeriphClockCmd+0x24>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dcc:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dce:	69d1      	ldr	r1, [r2, #28]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	61da      	str	r2, [r3, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000dd6:	e006      	b.n	8000de6 <RCC_APB1PeriphClockCmd+0x32>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ddc:	69d2      	ldr	r2, [r2, #28]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	43c9      	mvns	r1, r1
 8000de2:	400a      	ands	r2, r1
 8000de4:	61da      	str	r2, [r3, #28]
  }
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40021000 	.word	0x40021000

08000df4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e081      	b.n	8000f14 <GPIO_Init+0x120>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000e10:	2201      	movs	r2, #1
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d170      	bne.n	8000f0e <GPIO_Init+0x11a>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d003      	beq.n	8000e3c <GPIO_Init+0x48>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	791b      	ldrb	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d138      	bne.n	8000eae <GPIO_Init+0xba>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	2103      	movs	r1, #3
 8000e46:	4091      	lsls	r1, r2
 8000e48:	000a      	movs	r2, r1
 8000e4a:	43d2      	mvns	r2, r2
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4099      	lsls	r1, r3
 8000e62:	000b      	movs	r3, r1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	889b      	ldrh	r3, [r3, #4]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	0412      	lsls	r2, r2, #16
 8000e74:	0c12      	lsrs	r2, r2, #16
 8000e76:	2101      	movs	r1, #1
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	43d2      	mvns	r2, r2
 8000e80:	b292      	uxth	r2, r2
 8000e82:	4013      	ands	r3, r2
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	889b      	ldrh	r3, [r3, #4]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	799b      	ldrb	r3, [r3, #6]
 8000e96:	0019      	movs	r1, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	041b      	lsls	r3, r3, #16
 8000e9c:	0c1b      	lsrs	r3, r3, #16
 8000e9e:	4099      	lsls	r1, r3
 8000ea0:	000b      	movs	r3, r1
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	809a      	strh	r2, [r3, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	0052      	lsls	r2, r2, #1
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	4091      	lsls	r1, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	43d2      	mvns	r2, r2
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	0019      	movs	r1, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4099      	lsls	r1, r3
 8000ed4:	000b      	movs	r3, r1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	0412      	lsls	r2, r2, #16
 8000ee4:	0c12      	lsrs	r2, r2, #16
 8000ee6:	0052      	lsls	r2, r2, #1
 8000ee8:	2103      	movs	r1, #3
 8000eea:	4091      	lsls	r1, r2
 8000eec:	000a      	movs	r2, r1
 8000eee:	43d2      	mvns	r2, r2
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	79db      	ldrb	r3, [r3, #7]
 8000efe:	0019      	movs	r1, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4099      	lsls	r1, r3
 8000f06:	000b      	movs	r3, r1
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b0f      	cmp	r3, #15
 8000f18:	d800      	bhi.n	8000f1c <GPIO_Init+0x128>
 8000f1a:	e779      	b.n	8000e10 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b006      	add	sp, #24
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <GPIO_ReadInputDataBit>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF.  
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	000a      	movs	r2, r1
 8000f2e:	1cbb      	adds	r3, r7, #2
 8000f30:	801a      	strh	r2, [r3, #0]
  uint8_t bitstatus = 0x00;
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	8a1b      	ldrh	r3, [r3, #16]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	1cba      	adds	r2, r7, #2
 8000f42:	8812      	ldrh	r2, [r2, #0]
 8000f44:	4013      	ands	r3, r2
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <GPIO_ReadInputDataBit+0x32>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e003      	b.n	8000f5e <GPIO_ReadInputDataBit+0x3a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000f56:	230f      	movs	r3, #15
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	781b      	ldrb	r3, [r3, #0]
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b004      	add	sp, #16
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <GPIO_SetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	000a      	movs	r2, r1
 8000f76:	1cbb      	adds	r3, r7, #2
 8000f78:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8000f7a:	1cbb      	adds	r3, r7, #2
 8000f7c:	881a      	ldrh	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	619a      	str	r2, [r3, #24]
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <GPIO_ResetBits>:
  *         For STM32F072: (0..15) for GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, (0..10) for GPIOF.
  *         For STM32F031: (0..15) for GPIOA, GPIOB, (13..15) for GPIOC and (0..1, 6..7) for GPIOF. 
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	000a      	movs	r2, r1
 8000f96:	1cbb      	adds	r3, r7, #2
 8000f98:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	1cba      	adds	r2, r7, #2
 8000f9e:	8812      	ldrh	r2, [r2, #0]
 8000fa0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b002      	add	sp, #8
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)

08000fac <__libc_init_array>:
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <__libc_init_array+0x3c>)
 8000fae:	b570      	push	{r4, r5, r6, lr}
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	001e      	movs	r6, r3
 8000fb4:	4c0d      	ldr	r4, [pc, #52]	; (8000fec <__libc_init_array+0x40>)
 8000fb6:	1ae4      	subs	r4, r4, r3
 8000fb8:	10a4      	asrs	r4, r4, #2
 8000fba:	42a5      	cmp	r5, r4
 8000fbc:	d004      	beq.n	8000fc8 <__libc_init_array+0x1c>
 8000fbe:	00ab      	lsls	r3, r5, #2
 8000fc0:	58f3      	ldr	r3, [r6, r3]
 8000fc2:	4798      	blx	r3
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	e7f8      	b.n	8000fba <__libc_init_array+0xe>
 8000fc8:	f000 f816 	bl	8000ff8 <_init>
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <__libc_init_array+0x44>)
 8000fce:	2500      	movs	r5, #0
 8000fd0:	001e      	movs	r6, r3
 8000fd2:	4c08      	ldr	r4, [pc, #32]	; (8000ff4 <__libc_init_array+0x48>)
 8000fd4:	1ae4      	subs	r4, r4, r3
 8000fd6:	10a4      	asrs	r4, r4, #2
 8000fd8:	42a5      	cmp	r5, r4
 8000fda:	d004      	beq.n	8000fe6 <__libc_init_array+0x3a>
 8000fdc:	00ab      	lsls	r3, r5, #2
 8000fde:	58f3      	ldr	r3, [r6, r3]
 8000fe0:	4798      	blx	r3
 8000fe2:	3501      	adds	r5, #1
 8000fe4:	e7f8      	b.n	8000fd8 <__libc_init_array+0x2c>
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	08001020 	.word	0x08001020
 8000fec:	08001020 	.word	0x08001020
 8000ff0:	08001020 	.word	0x08001020
 8000ff4:	08001024 	.word	0x08001024

08000ff8 <_init>:
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffe:	bc08      	pop	{r3}
 8001000:	469e      	mov	lr, r3
 8001002:	4770      	bx	lr

08001004 <_fini>:
 8001004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100a:	bc08      	pop	{r3}
 800100c:	469e      	mov	lr, r3
 800100e:	4770      	bx	lr
